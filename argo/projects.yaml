apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: monitoring
  namespace: argocd
  # Finalizer that ensures that project is not deleted until it is not referenced by any application
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  # Project description
  description: Project to hold core compoments

  # Allow manifests to deploy from any Git repos
  sourceRepos:
  - 'https://github.com/prometheus-operator/kube-prometheus.git'
  - 'https://github.com/Modulus/argocd-demo.git'

  # Only permit applications to deploy to the guestbook namespace in the same cluster
  destinations:
  - namespace: monitoring
    server: https://kubernetes.default.svc
  - namespace: monitoring-stage
    server: https://kubernetes.default.svc  
  - namespace: default
    server: https://kubernetes.default.svc      
  - namespace: kube-system
    server: https://kubernetes.default.svc    

  # Deny all cluster-scoped resources from being created, except for Namespace
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace
  - group: 'apiextensions.k8s.io'
    kind: CustomResourceDefinition    
  - group: 'rbac.authorization.k8s.io'
    kind: ClusterRoleBinding
  - group: 'rbac.authorization.k8s.io'
    kind: ClusterRole
  - group: apiregistration.k8s.io    
    kind: APIService    

  # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy
  namespaceResourceBlacklist:
  - group: ''
    kind: ResourceQuota
  - group: ''
    kind: LimitRange
  - group: ''
    kind: NetworkPolicy

  # Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet
  namespaceResourceWhitelist:
  - group: 'apps'
    kind: Deployment
  - group: 'apps'
    kind: DaemonSet    
  - group: 'apps'
    kind: StatefulSet
  - group: ''
    kind: ServiceAccount
  - group: ''
    kind: Service
  - group: ''
    kind: Secret
  - group: '' 
    kind: PersistentVolumeClaims
  - group: ''
    kind: ConfigMap
  - group: 'rbac.authorization.k8s.io'
    kind: RoleBinding
  - group: 'rbac.authorization.k8s.io'
    kind: Roles
  - group: 'rbac.authorization.k8s.io'
    kind: RoleBinding    
  - group: monitoring.coreos.com
    kind: PodMonitor
  - group: monitoring.coreos.com
    kind: ServiceMonitor    
  - group: monitoring.coreos.com
    kind: PrometheusRule     
  - group: monitoring.coreos.com    
    kind: Alertmanager   
  - group: monitoring.coreos.com    
    kind: Prometheus          
  - group: apiregistration.k8s.io    
    kind: APIService
  - group: 'rbac.authorization.k8s.io'
    kind: RoleBinding
  - group: 'rbac.authorization.k8s.io'
    kind: Role
  - group: 'rbac.authorization.k8s.io'
    kind: RoleBinding 



    #TODO: Add PrometheusRule,PodMonitor

  # Enables namespace orphaned resource monitoring.
  orphanedResources:
    warn: false

  # roles:
  # # A role which provides read-only access to all applications in the project
  # - name: read-only
  #   description: Read-only privileges to my-project
  #   policies:
  #   - p, proj:my-project:read-only, applications, get, my-project/*, allow
  #   groups:
  #   - my-oidc-group

  # A role which provides sync privileges to only the guestbook-dev application, e.g. to provide
  # # sync privileges to a CI system
  # - name: ci-role
  #   description: Sync privileges for guestbook-dev
  #   policies:
  #   - p, proj:my-project:ci-role, applications, sync, my-project/guestbook-dev, allow

  #   # # NOTE: JWT tokens can only be generated by the API server and the token is not persisted
  #   # # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.
  #   # jwtTokens:
  #   # - iat: 1535390316
---
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: demo
  namespace: argocd
  # Finalizer that ensures that project is not deleted until it is not referenced by any application
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  # syncWindows:
  # - kind: allow
  #   schedule: '* * * * *' #Evry minute
  #   duration: 1h
  #   applications:
  #     - 'application'
  #   namespaces:
  #     - 'demo'
  #   # prune: true
  description: Project to hold core compoments

  # Allow manifests to deploy from any Git repos
  sourceRepos:
  - 'https://github.com/Modulus/argocd-demo.git'
  - 'https://github.com/Modulus/argocd-demo-app.git'

  # Only permit applications to deploy to the guestbook namespace in the same cluster
  destinations:
  - namespace: demo
    server: https://kubernetes.default.svc
  - namespace: demo-stage
    server: https://kubernetes.default.svc    
   

  # Deny all cluster-scoped resources from being created, except for Namespace
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace

  # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy
  namespaceResourceBlacklist:
  - group: ''
    kind: ResourceQuota
  - group: ''
    kind: LimitRange
  - group: ''
    kind: NetworkPolicy

  # Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet
  namespaceResourceWhitelist:
  - group: 'apps'
    kind: Deployment
  - group: 'apps'
    kind: DaemonSet    
  - group: ''
    kind: ServiceAccount
  - group: ''
    kind: Service
  - group: ''
    kind: Secret
  - group: '' 
    kind: PersistentVolumeClaims
  - group: ''
    kind: ConfigMap
  - group: monitoring.coreos.com
    kind: PodMonitor
  - group: monitoring.coreos.com
    kind: ServiceMonitor    
  - group: monitoring.coreos.com
    kind: PrometheusRule 
  - group: monitoring.coreos.com    
    kind: Alertmanager   
  - group: monitoring.coreos.com    
    kind: Prometheus          
  - group: 'rbac.authorization.k8s.io'
    kind: RoleBinding
  - group: 'rbac.authorization.k8s.io'
    kind: Role
  
   




    #TODO: Add PrometheusRule,PodMonitor

  # Enables namespace orphaned resource monitoring.
  orphanedResources:
    warn: false

  # roles:
  # # A role which provides read-only access to all applications in the project
  # - name: read-only
  #   description: Read-only privileges to my-project
  #   policies:
  #   - p, proj:my-project:read-only, applications, get, my-project/*, allow
  #   groups:
  #   - my-oidc-group

  # A role which provides sync privileges to only the guestbook-dev application, e.g. to provide
  # # sync privileges to a CI system
  # - name: ci-role
  #   description: Sync privileges for guestbook-dev
  #   policies:
  #   - p, proj:my-project:ci-role, applications, sync, my-project/guestbook-dev, allow

  #   # # NOTE: JWT tokens can only be generated by the API server and the token is not persisted
  #   # # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.
  #   # jwtTokens:
  #   # - iat: 1535390316  